    SimpleCrypt *crypto;
    EnumConfigConnectionMode m_eConfigConnectionMode;
    char m_szConnectionChain[CONFIG_MAX_PATH + 1];
    char m_szDescription[50];
    char m_szSerialNumber[CONFIG_MAX_PATH + 1];
    char m_szLicense[CONFIG_MAX_PATH + 1];
    int m_iFps, m_iFpsShow, m_iMatWidth, m_iMatHeight, m_iMatType, m_iBuffMaxLengh, m_iTimeSendFps;
    int m_iLeftCutout, m_iRightCutout, m_iTopCutout, m_iBottomCutout;
    EnumConfigCameraType m_eConfigCameraType;
    EnumConfigSensorType m_eConfigSensorType;
    bool m_bShowCurrentFrame, m_bShowSimulateName;
    bool m_bEnableAll;
    int m_iMatMetaDataLeft, m_iMatMetaDataRight;
    char m_szCameraModelName[20];
    char m_szCameraHierarchy[20];
    QByteArray m_baPartNumber;
    double m_dMediaTemp,m_dIFOV,m_dOffsetIfov_x,m_dOffsetIfov_y;
    double m_dFocalLength, m_dPixelPitch;
    double m_dDistParameterK1, m_dDistParameterK2, m_dDistParameterK3;
    std::vector<double> vGlobalTemp;
    bool m_bCCTVAccessControl;
    char m_szCCTVUsername[50], m_szCCTVPassword[50];
    char m_sGeolocation[100];

    unsigned char m_ucDataBits;
    unsigned char m_ucModeConvert2_8To16;
    unsigned short m_usDivConvert2_8To16;
    unsigned short m_usAndConvert2_8To16;
    int m_iInvertValues;

    /*Mileva parameters*/
    bool m_bAutomaticGain;
    int m_iMaxPixSaturated;
    int m_iAutoGainInterval;
    int m_iGain;
    int m_iDiodeBias;
    int m_iIntegrationTime,m_iIntegrationData;

    /*Pico & ATTO parameters*/
    int m_iParamGFID;
    int m_iParamGSK;
    int m_iParamVSK;
    int m_iParamVBUS;
    int m_iParamGain;
    int m_iParamTInt;

    bool m_bHasLaser;
    int m_iLaserCOM;
    EnumConfigLaserType m_eConfigLaserType;
    int m_iPortThirdPartyOnvif;
    int m_iPortThirdPartyHttp;
    int m_iPortThirdPartyRtsp;
    int m_iFramesSecondRtsp;
    bool m_bRTSPAccessControl;
    char m_szRTSPUsername[50], m_szRTSPPassword[50];
    bool m_bPaletteRtsp;
    bool m_bValuesRtsp;

    bool m_bVerticalFlip, m_bHorizontalFlip, m_bImageRotate, m_bPaletteBar, m_bStretching, m_bAutoStretching,m_bShowROI, m_bShowNOROI, m_bShowDigitalLevels, m_bShowSaturatedPixels;
    double m_dCamEmissivity, m_dCamGain, m_dCamOffset;
    bool m_bEmailAlert, m_bShowWindowTest,m_bWeightingFactors, m_bCameraRepeatedFrames;

    int m_iReconnectionWait, m_iReconnectionAttemps, m_iSkip, m_iMean;

    char m_szConnectionPhidget[CONFIG_MAX_IP + 1];
    int m_iRelayPort, m_iStepperPort, m_iSensorPort;
    int m_iShutterMaxPos, m_iShutterMinPos;

    bool m_bHasShutter;
    int m_iNucSecondsBetweenAutomatic;        // Tiempo entre Nuc automaticas
    int m_iSecondsDelayClosedshutterImgnuc;   // Tiempo de retraso desde que se cierra el Shutter y se recibe la primera imagen con el shutter cerrado, para poder hacer la Nuc
    bool m_bPanAndTilt;
    int m_iPanAndTiltCom, m_iPanAndTiltID, m_iPanAndTiltSpeed;
    bool m_bPanAndTiltPelcoD, m_bPanInverted, m_bTiltInverted;
    char m_szTourActiveAutomatic[CFG_MAX_SMALL_ID + 1];
    char m_szPresetActiveAutomatic[CFG_MAX_SMALL_ID + 1];
    bool m_bAutomaticRaw, m_bAutomaticRLK, m_bAutomaticMP4;
    bool m_bHasSensorLens, m_bHasPleoraExpansor, m_bHasMemorySPI, m_bHasCompass;

    bool m_bAdamRelay, m_bPulseRelay;
    char m_szAdamRelayIP[CONFIG_MAX_PATH + 1];
    int m_iAdamRelayPort, m_iMaxOperationTemperature, m_iPulseRelaySeconds;

    bool m_bSwitchPOE;
    char m_szSwitchIP[CONFIG_MAX_PATH + 1];
    int m_iSwitchInterface;

    /* Variables para el reset automático de cámaras */
    bool m_bAutoResetEnabled;
    bool m_bResetPeriodicEnabled;
    bool m_bResetPunctualEnabled;
    char m_szResetUnits[20];
    int m_iResetUnitsValue;
    char m_szResetDateTime[50];
    char m_szResetPeriodicDateTime[50];

    bool m_bCloseShutter;
    bool m_bFPSWarnings;
    bool m_bSensiaNUC;

    int m_iCurrentPreset, m_iCurrentTour;

    bool m_bMaintenanceMode;
    char m_szCameraBand[CONFIG_MAX_PATH + 1];

    /* Smart camera periodic cleaner */
    int m_iPeriodicUnitsValue;
    char m_szPeriodicUnits[50], m_szPeriodicDeleteAtTime[50], m_szNextCheckTime[50];
    bool m_bPeriodicPunctual, m_bPeriodicRepeat, m_bPeriodicDeleteAt, m_bPeriodicDeleteAtActive;

    bool m_bIsDummy;