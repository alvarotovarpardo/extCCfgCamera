    SimpleCrypt *crypto;
    EnumConfigConnectionMode m_eConfigConnectionMode;
    EnumConfigCameraMode m_eConfigCameraMode;
    char m_szConnectionChain[CONFIG_MAX_PATH + 1];
    char m_szDescription[50];
    char m_sFuel[20];
    int m_iFps, m_iFpsShow, m_iMatWidth, m_iMatHeight, m_iMatType, m_iBuffMaxLengh, m_iTimeSendFps;
    EnumConfigCameraType m_eConfigCameraType;
    EnumConfigSensorType m_eConfigSensorType;
    bool m_bElectronicOld;
    bool m_bEnableAll;
    int m_iMatMetaDataLeft, m_iMatMetaDataRight;
    char m_szCameraModelName[20];
    QByteArray m_baPartNumber;
    char m_szPlaybackSpeed[20];

    bool m_bCCTVAccessControl;
    char m_szCCTVUsername[50], m_szCCTVPassword[50];

    unsigned char m_ucDataBits;
    unsigned char m_ucModeConvert2_8To16;
    unsigned short m_usDivConvert2_8To16;
    unsigned short m_usAndConvert2_8To16;
    int m_iInvertValues;

    /*Mileva parameters*/
    int m_iGain;
    int m_iDiodeBias;
    int m_iIntegrationTime;

    /*Pico & ATTO parameters*/
    int m_iParamGFID;
    int m_iParamGSK;
    int m_iParamVSK;
    int m_iParamVBUS;
    int m_iParamGain;
    int m_iParamTInt;

    int m_iPortThirdPartyOnvif;
    int m_iPortThirdPartyHttp;
    int m_iPortThirdPartyRtsp;    
    int m_iFramesSecondRtsp;
    bool m_bPaletteRtsp;
    bool m_bValuesRtsp;

    bool m_bVerticalFlip, m_bHorizontalFlip, m_bImageRotate, m_bPaletteBar, m_bStretching, m_bAutoStretching,m_bShowROI, m_bShowNOROI, m_bShowDigitalLevels, m_bShowSaturatedPixels;
    double m_dCamEmissivity;
    bool m_bEmailAlert, m_bEmailSendAll;
    char m_szEmail[50];
    char m_szEmailCC[640];
    int m_iReconnectionWait, m_iReconnectionAttemps;

    bool m_bHasShutter, m_bCloseShutter;
    int m_iNucSecondsBetweenAutomatic;        // Tiempo entre Nuc automaticas
    int m_iSecondsDelayClosedshutterImgnuc;   // Tiempo de retraso desde que se cierra el Shutter y se recibe la primera imagen con el shutter cerrado, para poder hacer la Nuc
    bool m_bPanAndTilt;
    char m_szTourActiveAutomatic[CFG_MAX_SMALL_ID + 1];
    char m_szPresetActiveAutomatic[CFG_MAX_SMALL_ID + 1];
    bool m_bAutomaticRaw;
    bool m_bHasSensorTemperature, m_bHasPleoraExpansor, m_bHasMemorySPI, m_bHasCompass;

    /* Variables para el reset automático de cámaras */
    bool m_bAutoResetEnabled;
    bool m_bResetPeriodicEnabled;
    bool m_bResetPunctualEnabled;
    char m_szResetUnits[10];
    int m_iResetUnitsValue;
    char m_szResetDateTime[50];
    char m_szResetPeriodicDateTime[50];

    /* Variables de RIO */
    double m_dThresholdCO;
    double m_dThresholdNOx;
    double m_dThresholdHC;
    double m_dThresholdOpacity;
    bool m_bDumpCO2, m_bDumpCO, m_bDumpNOx, m_bDumpHC, m_bDumpOpacity;
    double m_dTHLocalMinCO2,m_dTHLocalMinCO,m_dTHLocalMinHC,m_dTHLocalMinNOx,m_dTHLocalMinOpacity, m_dWaitTime,m_dAbsorbanceCO2,m_dAbsorbanceCO,m_dAbsorbanceHC,m_dAbsorbanceNOx,m_dAbsorbanceOpacity;
    int m_iVariationThreshold;
    int m_iKernelCO2, m_iKernelCO, m_iKernelHC, m_iKernelNOx, m_iKernelOpacity, m_iOffset;
    int m_iOCRPort;
    bool m_bOCR;

    /* Variables para GreenCPorts */
    char m_szUnits[50];
    char m_szTarjetGas[50];
    double m_dCorrectionFactor;
    char m_szOpticalSize[50];
    char m_szSensitivity[50];
    double m_dLambda1, m_dLambda2;
    bool m_bGasAbsorption, m_bGasEmission, m_bEdgeRemove;
